name: iOS Release Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'V2er/Config/Version.xcconfig'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if version unchanged'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  version-check:
    name: Check Version and Create Tag
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_tag: ${{ steps.check.outputs.new_tag }}
      version: ${{ steps.check.outputs.version }}
      build: ${{ steps.check.outputs.build }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check version and create tag if needed
      id: check
      run: |
        # Get current version from Version.xcconfig (works on Linux)
        CURRENT_VERSION=$(grep '^MARKETING_VERSION = ' V2er/Config/Version.xcconfig | sed 's/.*MARKETING_VERSION = //' | xargs)
        CURRENT_BUILD=$(grep '^CURRENT_PROJECT_VERSION = ' V2er/Config/Version.xcconfig | sed 's/.*CURRENT_PROJECT_VERSION = //' | xargs)

        echo "Current version: $CURRENT_VERSION (build $CURRENT_BUILD)"

        # Check if tag already exists
        TAG_NAME="v$CURRENT_VERSION"

        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          if [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            echo "Tag $TAG_NAME exists but force_release is true"
            # Delete existing tag for force release
            git push origin --delete "$TAG_NAME" 2>/dev/null || true
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Tag $TAG_NAME does not exist, will create it"
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi

        echo "new_tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "build=$CURRENT_BUILD" >> $GITHUB_OUTPUT

    - name: Create and push tag
      if: steps.check.outputs.should_release == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        TAG_NAME="${{ steps.check.outputs.new_tag }}"
        VERSION="${{ steps.check.outputs.version }}"
        BUILD="${{ steps.check.outputs.build }}"

        # Create annotated tag
        git tag -a "$TAG_NAME" -m "Release version $VERSION (build $BUILD)"

        # Push tag
        git push origin "$TAG_NAME"

        echo "‚úÖ Successfully created tag: $TAG_NAME"

  build-and-release:
    name: Build and Release to TestFlight
    needs: version-check
    if: needs.version-check.outputs.should_release == 'true'
    runs-on: macos-latest

    steps:
    - name: Checkout repository at tag
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        ref: ${{ needs.version-check.outputs.new_tag }}

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: false

    - name: Install Fastlane
      run: |
        gem install fastlane
        gem install xcpretty

    - name: Setup SSH for Match repository
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}

    - name: Create App Store Connect API Key
      env:
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
      run: |
        mkdir -p ~/.appstoreconnect/private_keys
        echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8
        chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8

        # Set environment variables for Fastlane
        echo "APP_STORE_CONNECT_API_KEY_KEY_ID=$APP_STORE_CONNECT_KEY_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_KEY=~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_KEY_ID}.p8" >> $GITHUB_ENV

    - name: Run Fastlane Match
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        fastlane match appstore --readonly

    - name: Build and Upload to TestFlight
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        fastlane beta

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version-check.outputs.new_tag }}
        name: Release ${{ needs.version-check.outputs.version }}
        body: |
          ## üöÄ Version ${{ needs.version-check.outputs.version }}
          Build: ${{ needs.version-check.outputs.build }}

          ### TestFlight
          This version has been automatically submitted to TestFlight for beta testing.

          ### What's New
          - See [commit history](https://github.com/${{ github.repository }}/commits/${{ needs.version-check.outputs.new_tag }}) for changes

          ---
          *This release was automatically created by GitHub Actions*
        draft: false
        prerelease: false

    - name: Post release notification
      if: success()
      run: |
        echo "‚úÖ Successfully released version ${{ needs.version-check.outputs.version }} to TestFlight!"
        echo "üè∑Ô∏è Tag: ${{ needs.version-check.outputs.new_tag }}"
        echo "üî¢ Build: ${{ needs.version-check.outputs.build }}"